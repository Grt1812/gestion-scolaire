const express = require('express');
const router = express.Router();
const etablissementController = require('../controllers/etablissementController');
const auth = require('../middlewares/auth'); // Import the auth middleware
const requireAdmin = require('../middlewares/requireAdmin'); // Assuming you have this middleware

// ğŸ“Œ DÃ©finition des routes
router.get('/', etablissementController.getAllEtablissements);
router.get('/:id', etablissementController.getEtablissementById);
router.post('/', auth, requireAdmin, etablissementController.createEtablissement);
router.put('/:id', auth, requireAdmin, etablissementController.updateEtablissement);
router.delete('/:id', auth, requireAdmin, etablissementController.deleteEtablissement);

module.exports = router;

/**
 * Liste des niveaux par catÃ©gorie
 */
const niveauxParCategorie = {
    Maternelle: ["Niveau 1", "Niveau 2", "Niveau 3"],
    Primaire: ["1Ã¨re A", "1Ã¨re B","1Ã¨re C","1Ã¨re D", "2Ã¨me A", "2Ã¨me B","2Ã¨me C", "3Ã¨me A","3Ã¨me B", "3Ã¨me C", "4Ã¨me A", "4Ã¨me B","4Ã¨me C", "5Ã¨me A", "5Ã¨me B","5Ã¨me C", "6Ã¨me A", "6Ã¨me B"],
    Secondaire: ["7Ã¨me EB/A","7Ã¨me EB/B","7Ã¨me EB/C", "8Ã¨me EB/A","8Ã¨me EB/B","8Ã¨me EB/C", "1Ã¨re HP", "1Ã¨re HTS","1Ã¨re HTN","1Ã¨re HTC","1Ã¨re HTEo", "2Ã¨me HP", "2Ã¨me HTS","2Ã¨me HTN","2Ã¨me HTC","2Ã¨me HTEo", "3Ã¨me HP", "3Ã¨me HTS","3Ã¨me HTN","3Ã¨me HTC","3Ã¨me HTEo", "4Ã¨me HP", "4Ã¨me HTS",,"4Ã¨me HTN","4Ã¨me HTC","4Ã¨me HTEo"]
};

/**
 * âœ… Ajouter un Ã©tablissement (Admin seulement)
 */
router.post('/', auth, requireAdmin, async (req, res) => {
    try {
        const { nom, categorie } = req.body;
        
        // VÃ©rification de la catÃ©gorie
        if (!niveauxParCategorie[categorie]) {
            return res.status(400).json({ message: "CatÃ©gorie invalide" });
        }

        // Ajout des niveaux Ã  lâ€™Ã©tablissement
        const niveaux = niveauxParCategorie[categorie].map(niveau => ({ nom: niveau, eleves: [] }));
        const etablissement = new Etablissement({ nom, categorie, niveaux });

        await etablissement.save();
        res.status(201).json({ message: "Ã‰tablissement ajoutÃ© avec succÃ¨s", etablissement });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * âœ… RÃ©cupÃ©rer les Ã©tablissements dâ€™une catÃ©gorie spÃ©cifique
 */
router.get('/categorie/:categorie', async (req, res) => {
    try {
        const etablissements = await Etablissement.find({ categorie: req.params.categorie });
        res.json(etablissements);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * âœ… Ajouter un Ã©lÃ¨ve Ã  un niveau spÃ©cifique (Admin ou enseignant)
 */
router.post('/:idEtablissement/niveau/:niveauNom/eleve', auth, async (req, res) => {
    try {
        const { idEtablissement, niveauNom } = req.params;
        const { nom, prenom, dateNaissance, sexe, adresse_eleve, telephone_parent, annee_scolaire } = req.body;

        // VÃ©rification des droits (Admin ou Enseignant)
        if (req.user.role !== 'admin' && req.user.role !== 'enseignant') {
            return res.status(403).json({ message: "AccÃ¨s interdit" });
        }

        // VÃ©rification de l'Ã©tablissement
        const etablissement = await Etablissement.findById(idEtablissement);
        if (!etablissement) return res.status(404).json({ message: "Ã‰tablissement non trouvÃ©" });

        // VÃ©rification du niveau
        const niveau = etablissement.niveaux.find(n => n.nom === niveauNom);
        if (!niveau) return res.status(404).json({ message: "Niveau non trouvÃ©" });

        // VÃ©rification de l'annÃ©e scolaire
        if (!/^\d{4}-\d{4}$/.test(annee_scolaire)) {
            return res.status(400).json({ message: "Format de l'annÃ©e scolaire invalide (ex: 2024-2025)" });
        }

        // VÃ©rification du numÃ©ro de tÃ©lÃ©phone
        if (!/^(\+243\d{9}|\d{9})$/.test(telephone_parent)) {
            return res.status(400).json({ message: "NumÃ©ro de tÃ©lÃ©phone invalide" });
        }

        // Ajout de l'Ã©lÃ¨ve
        const nouvelEleve = { nom, prenom, dateNaissance, sexe, adresse_eleve, telephone_parent, annee_scolaire, paiements: [] };
        niveau.eleves.push(nouvelEleve);

        await etablissement.save();
        res.json({ message: "Ã‰lÃ¨ve ajoutÃ© avec succÃ¨s", etablissement });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * âœ… Supprimer un Ã©lÃ¨ve (Admin seulement)
 */
router.delete('/:idEtablissement/niveau/:niveauNom/eleve/:eleveId', auth, requireAdmin, async (req, res) => {
    try {
        const { idEtablissement, niveauNom, eleveId } = req.params;

        // VÃ©rification de l'Ã©tablissement
        const etablissement = await Etablissement.findById(idEtablissement);
        if (!etablissement) return res.status(404).json({ message: "Ã‰tablissement non trouvÃ©" });

        // Trouver le niveau et supprimer l'Ã©lÃ¨ve
        const niveau = etablissement.niveaux.find(n => n.nom === niveauNom);
        if (!niveau) return res.status(404).json({ message: "Niveau non trouvÃ©" });

        const indexEleve = niveau.eleves.findIndex(e => e._id.toString() === eleveId);
        if (indexEleve === -1) return res.status(404).json({ message: "Ã‰lÃ¨ve non trouvÃ©" });

        niveau.eleves.splice(indexEleve, 1);
        await etablissement.save();

        res.json({ message: "Ã‰lÃ¨ve supprimÃ© avec succÃ¨s", etablissement });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * âœ… RÃ©cupÃ©rer les Ã©tablissements accessibles Ã  l'utilisateur connectÃ©
 */
router.get('/mon-etablissement', auth, async (req, res) => {
    try {
        const etablissement = await Etablissement.findById(req.user.etablissement);
        if (!etablissement) return res.status(404).json({ message: "Ã‰tablissement non trouvÃ©" });

        res.json(etablissement);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

module.exports = router;