const mongoose = require('mongoose');

/**
 * Validation du format de l'annÃ©e scolaire (YYYY-YYYY)
 */
function validateAnneeScolaire(value) {
    return /^\d{4}-\d{4}$/.test(value);
}

/**
 * Validation du format du numÃ©ro de tÃ©lÃ©phone
 * Format : +243971234567 ou 0971234567
 */
function validateTelephone(value) {
    return /^(\+243\d{9}|\d{9})$/.test(value);
}

/**
 * ðŸ“Œ SchÃ©ma des paiements d'un Ã©lÃ¨ve
 */
const PaiementSchema = new mongoose.Schema({
    montant: { type: Number, required: true, min: 0 },  // Montant du paiement
    date: { type: Date, default: Date.now },  // Date du paiement
    mois: { type: String, required: true },  // Mois du paiement
    trimestre: { 
        type: String, 
        enum: ['1er trimestre', '2Ã¨me trimestre', '3Ã¨me trimestre'], 
        required: true 
    },  // Trimestre concernÃ©
    anneeScolaire: { 
        type: String, 
        required: true, 
        validate: [validateAnneeScolaire, "Format d'annÃ©e scolaire invalide (ex: 2024-2025)"]
    }
});


/**
 * ðŸ“Œ SchÃ©ma des Ã©lÃ¨ves
 */
const EleveSchema = new mongoose.Schema({
    nom: { type: String, required: true, trim: true },
    post_nom: { type: String, required: true, trim: true },
    prenom: { type: String, required: true, trim: true },
    sexe: { type: String, enum: ['M', 'F'], required: true },
    date_naissance: { type: Date, required: true },
    lieu_naissance: { type: String, required: true },
    nationalite: { type: String, required: true },
    adresse_eleve: { type: String, required: true },
    nom_pere: { type: String, required: true },
    nom_mere: { type: String, required: true },
    telephone_parent: { 
        type: String, 
        required: true, 
        validate: [validateTelephone, "NumÃ©ro de tÃ©lÃ©phone invalide"] 
    },
    annee_scolaire: { 
        type: String, 
        required: true, 
        validate: [validateAnneeScolaire, "Format d'annÃ©e scolaire invalide (ex: 2024-2025)"]
    },
    cas_social: { type: Boolean, default: false }, // Ã‰lÃ¨ve dispensÃ© des paiements
    paiements: { type: [PaiementSchema], default: [] } // Liste des paiements effectuÃ©s
});

/**
 * ðŸ“Œ SchÃ©ma des classes
 */
const ClasseSchema = new mongoose.Schema({
    nom: { type: String, required: true },
    anneeScolaire: { 
        type: String, 
        required: true, 
        validate: [validateAnneeScolaire, "Format d'annÃ©e scolaire invalide (ex: 2024-2025)"]
    },
    eleves: { type: [EleveSchema], default: [] }
});

/**
 * ðŸ“Œ SchÃ©ma des Ã©tablissements scolaires
 */
const EtablissementSchema = new mongoose.Schema({
    nom: { type: String, required: true },
    adresse: String,
    telephone: {
        type: String,
        validate: [validateTelephone, "NumÃ©ro de tÃ©lÃ©phone invalide"]
    },
    categorie: { 
        type: String, 
        enum: ['Maternelle', 'Primaire', 'Secondaire'], 
        required: true 
    },
    classes: { type: [ClasseSchema], default: [] }
});

/**
 * ðŸ“Œ MÃ‰THODES STATIQUES - Gestion des Ã©tablissements et Ã©lÃ¨ves
 */

// ðŸ“Œ Ajouter un Ã©lÃ¨ve dans une classe spÃ©cifique
EtablissementSchema.methods.ajouterEleve = async function(classeNom, eleveData) {
    const classe = this.classes.find(c => c.nom === classeNom);
    if (!classe) throw new Error("Classe non trouvÃ©e");
    
    classe.eleves.push(eleveData);
    await this.save();
    return this;
};

// ðŸ“Œ Enregistrer un paiement pour un Ã©lÃ¨ve (sauf si en cas social)
EtablissementSchema.methods.enregistrerPaiement = async function(classeNom, eleveId, montant, mois, trimestre, anneeScolaire) {
    const classe = this.classes.find(c => c.nom === classeNom);
    if (!classe) throw new Error("Classe non trouvÃ©e");

    const eleve = classe.eleves.id(eleveId);
    if (!eleve) throw new Error("Ã‰lÃ¨ve non trouvÃ©");

    if (eleve.cas_social) {
        throw new Error("Cet Ã©lÃ¨ve est en situation de cas social et ne doit pas payer.");
    }

    eleve.paiements.push({ montant, mois, trimestre, anneeScolaire });
    await this.save();
    return this;
};


// ðŸ“Œ Modifier les informations d'un Ã©lÃ¨ve
EtablissementSchema.methods.modifierEleve = async function(classeNom, eleveId, newData) {
    const classe = this.classes.find(c => c.nom === classeNom);
    if (!classe) throw new Error("Classe non trouvÃ©e");

    const eleve = classe.eleves.id(eleveId);
    if (!eleve) throw new Error("Ã‰lÃ¨ve non trouvÃ©");

    Object.assign(eleve, newData); // Mise Ã  jour des donnÃ©es
    await this.save();
    return this;
};

// ðŸ“Œ RÃ©cupÃ©rer la liste des Ã©lÃ¨ves d'une classe spÃ©cifique
EtablissementSchema.methods.getElevesByClasse = function(classeNom) {
    const classe = this.classes.find(c => c.nom === classeNom);
    if (!classe) throw new Error("Classe non trouvÃ©e");

    return classe.eleves;
};

// ðŸ“Œ RÃ©cupÃ©rer les paiements d'un Ã©lÃ¨ve
EtablissementSchema.methods.getPaiementsByEleve = function(classeNom, eleveId) {
    const classe = this.classes.find(c => c.nom === classeNom);
    if (!classe) throw new Error("Classe non trouvÃ©e");

    const eleve = classe.eleves.id(eleveId);
    if (!eleve) throw new Error("Ã‰lÃ¨ve non trouvÃ©");

    return eleve.paiements;
};

// ðŸ“Œ GÃ©nÃ©rer un rapport des paiements pour une annÃ©e scolaire
EtablissementSchema.methods.getRapportPaiementsParTrimestre = function(anneeScolaire, trimestre) {
    let rapport = [];

    this.classes.forEach(classe => {
        classe.eleves.forEach(eleve => {
            const paiementsTrimestre = eleve.paiements.filter(p => 
                p.anneeScolaire === anneeScolaire && p.trimestre === trimestre
            );
            const totalPaye = paiementsTrimestre.reduce((total, p) => total + p.montant, 0);

            rapport.push({
                nom: `${eleve.nom} ${eleve.post_nom} ${eleve.prenom}`,
                classe: classe.nom,
                trimestre,
                totalPaye,
                casSocial: eleve.cas_social
            });
        });
    });

    return rapport;
};
